{
  "openapi": "3.0.0",
  "info": {
    "title": "CookLink API Documentation",
    "version": "1.0.0",
    "description": "API documentation for CookLink Capstone Project, by Fatma Zehra AydÄ±n, Tareq Harh, and Omar Qaqish"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "GoogleOAuth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://localhost:3000/api/auth/google",
            "tokenUrl": "https://accounts.google.com/o/oauth2/token",
            "scopes": {
              "https://www.googleapis.com/auth/userinfo.profile": "All user operations requiring authentication."
            }
          }
        }
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 30
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 6
          },
          "passwordChangedAt": {
            "type": "string",
            "format": "date-time"
          },
          "provider": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "address": {
            "type": "string",
            "format": "ObjectId"
          },
          "profilePicture": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["admin", "cook", "user"],
            "default": "user"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "dishes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        },
        "required": ["username", "email"]
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string"
          },
          "buildingNumber": {
            "type": "number"
          },
          "apartmentNumber": {
            "type": "number"
          },
          "neighborhood": {
            "type": "string"
          },
          "district": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalCode": {
            "type": "number"
          }
        },
        "required": [
          "street",
          "buildingNumber",
          "apartmentNumber",
          "neighborhood",
          "district",
          "city",
          "postalCode"
        ]
      },
      "Dish": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cuisine": {
            "type": "string",
            "enum": ["Turkish", "Syrian", "Iraqi", "Other"]
          },
          "image": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["name", "description", "cuisine", "image", "price"]
      },
      "Cart": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "format": "ObjectId"
          },
          "dish": {
            "type": "string",
            "format": "ObjectId"
          },
          "quantity": {
            "type": "number",
            "minimum": 1,
            "maximum": 10
          }
        },
        "required": ["user", "dish", "quantity"]
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "dish": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "cuisine": {
                "type": "string",
                "enum": ["Turkish", "Syrian", "Iraqi", "Other"]
              },
              "image": {
                "type": "string"
              },
              "price": {
                "type": "number"
              }
            }
          },
          "quantity": {
            "type": "number",
            "minimum": 1,
            "maximum": 10
          },
          "status": {
            "type": "string",
            "enum": ["pending", "confirmed", "prepared"],
            "default": "pending"
          }
        },
        "required": ["dish", "quantity", "status"]
      },
      "Order": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "totalPrice": {
            "type": "number"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "type": "string",
            "format": "ObjectId"
          },
          "status": {
            "type": "string",
            "enum": ["waiting", "paid", "delivered", "canceled"],
            "default": "waiting"
          }
        },
        "required": ["items", "totalPrice", "user", "status"]
      }
    }
  },
  "paths": {
    "/api/auth/signin": {
      "post": {
        "summary": "Sign in to the application",
        "tags": ["Authentication"],
        "requestBody": {
          "description": "Sign-in credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - Successfully signed in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "JWTtoken": {
                      "type": "string",
                      "description": "Access token to be used for authenticated requests"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/signup": {
      "post": {
        "summary": "Sign up for a new user account",
        "tags": ["Authentication"],
        "requestBody": {
          "description": "User's registration details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "maxLength": 30,
                    "description": "Username for the new user"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "First name of the new user"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name of the new user"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address for the new user"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the new user"
                  },
                  "password2": {
                    "type": "string",
                    "description": "Confirm password for the new user"
                  }
                },
                "required": ["username", "email", "password", "password2"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User",
                      "description": "The newly created user object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid data provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/cook/signup": {
      "post": {
        "summary": "Sign up for a new cook account",
        "tags": ["Authentication"],
        "requestBody": {
          "description": "Cook's registration details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "maxLength": 30,
                    "description": "Username for the new cook"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "First name of the new cook"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name of the new cook"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address for the new cook"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the new cook"
                  },
                  "password2": {
                    "type": "string",
                    "description": "Confirm password for the new cook"
                  },
                  "location": {
                    "type": "string",
                    "description": "Location of the new cook"
                  },
                  "bio": {
                    "type": "string",
                    "description": "Bio of the new cook"
                  }
                },
                "required": [
                  "username",
                  "email",
                  "password",
                  "password2",
                  "location",
                  "bio"
                ]
              }
            }
          }
        },
        "responses": {
          "responses": {
            "201": {
              "description": "Cook created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Success message"
                      },
                      "newCook": {
                        "$ref": "#/components/schemas/User",
                        "description": "The newly created cook object"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid data provided",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Error message"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Error message"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/signout": {
      "get": {
        "summary": "Sign out from the application",
        "tags": ["Authentication"],
        "responses": {
          "200": {
            "description": "Successfully signed out",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/users": {
      "get": {
        "summary": "Get all users",
        "tags": ["User"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "summary": "Get authenticated user's profile",
        "operationId": "getMyInfo",
        "tags": ["User"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "username": "string",
                  "firstName": "string",
                  "lastName": "string",
                  "email": "user@example.com",
                  "address": {
                    "street": "string",
                    "buildingNumber": 0,
                    "apartmentNumber": 0,
                    "neighborhood": "string",
                    "district": "string",
                    "city": "string",
                    "country": "string",
                    "postalCode": 0
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update authenticated user's profile",
        "operationId": "updateUserProfile",
        "tags": ["User"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete authenticated user's account",
        "operationId": "deleteMyAccount",
        "tags": ["User"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Account deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/cook": {
      "put": {
        "summary": "Update cook profile",
        "tags": ["User"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cook profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/cook-page/{cookId}": {
      "get": {
        "summary": "Get cook's public page by ID",
        "tags": ["User"],
        "parameters": [
          {
            "name": "cookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "User ID of the cook"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "firstName": "string",
                  "lastName": "string",
                  "profilePicture": "string",
                  "location": "string",
                  "bio": "string",
                  "dishes": [
                    {
                      "name": "string",
                      "description": "string",
                      "cuisine": "string",
                      "image": "string",
                      "price": 0
                    },
                    {
                      "name": "string",
                      "description": "string",
                      "cuisine": "string",
                      "image": "string",
                      "price": 0
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Cook not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/address": {
      "post": {
        "summary": "Add an address for the authenticated user",
        "tags": ["Address"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "message": "You already have an address"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/address/{addressId}": {
      "get": {
        "summary": "Get authenticated user's address by ID",
        "operationId": "getAddress",
        "tags": ["Address"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the address to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Address retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Address not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update authenticated user's address",
        "operationId": "updateAddress",
        "tags": ["Address"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the address to be updated"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Address not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete authenticated user's address",
        "operationId": "deleteAddress",
        "tags": ["Address"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the address to be deleted"
          }
        ],
        "responses": {
          "200": {
            "description": "Address deleted successfully"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Address not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/address/addresses": {
      "get": {
        "summary": "Retrieves all addresses (restricted to admins)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Address"],
        "responses": {
          "200": {
            "description": "Successfully retrieved addresses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Failed to fetch addresses"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/dish": {
      "get": {
        "tags": ["Dish"],
        "operationId": "getDishesToGuests",
        "summary": "Show a sample of dishes to unauthenticated guests",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dish"
                },
                "example": {
                  "message": "guest",
                  "dishes": [
                    {
                      "_id": "string",
                      "name": "string",
                      "description": "string",
                      "cuisine": "string",
                      "image": "string",
                      "price": 0,
                      "createdAt": "string"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch dishes"
          }
        }
      },
      "post": {
        "tags": ["Dish"],
        "operationId": "addDish",
        "summary": "Allow a cook to add a new dish",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "cuisine": {
                    "type": "string",
                    "enum": ["Turkish", "Syrian", "Iraqi", "Other"]
                  },
                  "image": { "type": "string" },
                  "price": { "type": "number", "minimum": 0 }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - Dish added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dish"
                },
                "example": {
                  "_id": "string",
                  "name": "Dish name",
                  "description": "Dish description",
                  "cuisine": "Turkish",
                  "image": "URL to image",
                  "price": 0,
                  "createdAt": "string",
                  "updatedAt": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "example": {
              "error": "please add a dish name"
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "example": {
              "error": "Failed to add dish"
            }
          }
        }
      }
    },
    "/api/dish/{dishId}": {
      "get": {
        "tags": ["Dish"],
        "operationId": "getOneDish",
        "summary": "Get a single dish by ID",
        "parameters": [
          {
            "name": "dishId",
            "in": "path",
            "description": "ID of the dish to be retrieved",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dish"
                },
                "example": {
                  "_id": "string",
                  "name": "string",
                  "description": "string",
                  "cuisine": "string",
                  "image": "string",
                  "price": 0,
                  "createdAt": "string",
                  "updatedAt": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Dish not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Failed to fetch dish"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Dish"],
        "operationId": "updateDish",
        "summary": "Update a single dish by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "dishId",
            "in": "path",
            "description": "ID of the dish to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "cuisine": { "type": "string" },
                  "image": { "type": "string" },
                  "price": { "type": "number", "minimum": 0 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dish"
                },
                "example": {
                  "_id": "string",
                  "name": "string",
                  "description": "string",
                  "cuisine": "string",
                  "image": "string",
                  "price": 0,
                  "createdAt": "string",
                  "updatedAt": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Invalid fields found: <invalid_field_1>, <invalid_field_2>"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "error": "You do not have permission to update this dish"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "message": "Dish not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "error": "Failed to update dish"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Dish"],
        "operationId": "removeDish",
        "summary": "Delete a single dish by ID",
        "parameters": [
          {
            "name": "dishId",
            "in": "path",
            "description": "ID of the dish to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            }
          }
        ],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "message": "Dish deleted successfully"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "error": "You do not have permission to DELETE this dish"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "Dish not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "error": "Failed to delete dish"
                }
              }
            }
          }
        }
      }
    }
  }
}
